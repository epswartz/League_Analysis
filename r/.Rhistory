library(dplyr)
turnouts <- inner_join(agg_hist,agg_stat, by = c("County","Age","Party","Race","Sex","Ethnic","VTD","Prec"))
turnouts$turnout_ratio <- turnouts$act_total_voters / turnouts$registered_total_voters
# Factorize the ones that didn't get automatically factorized
turnouts$Age <- factor(turnouts$Age)
turnouts$Prec <- factor(turnouts$Prec)
turnouts$Sex <- factor(turnouts$Sex)
length(unique(turnouts$county_desc))
random <-sample(1:100, 20, replace=FALSE)
counties <- unique(turnouts$county_desc)
counties_subset <- counties[random]
turnouts_sub <- turnouts[turnouts$county_desc %in% counties_subset, ]
# Remove greater than 1 ratios
turnouts_sub <- turnouts_sub[turnouts_sub$turnout_ratio <= 1,]
# EDA
# Gender (U higher?)
boxplot(turnout_ratio ~ Sex, data = turnouts_sub, col=rainbow(10))
min(turnouts$turnout_ratio)
library(lattice)
set.seed(15)
knitr::opts_chunk$set(echo = TRUE)
hist <- read.table("../Data/history_stats_20161108.txt", sep="\t", dec=",",header = T, na.strings ="", stringsAsFactors= T, comment.char="")
stat <- read.table("../Data/voter_stats_20161108.txt",sep=" " ,header = T, na.strings ="", stringsAsFactors= T)
colnames(hist)[colnames(hist)=="total_voters"] <- "act_total_voters"
hist
colnames(stat)[colnames(stat)=="total_voters"] <- "registered_total_voters"
stat
agg_hist <- aggregate(hist$act_total_voters, list(Age=hist$age, Party=hist$party_cd, Race=hist$race_code, County = hist$county_desc, VTD = hist$vtd_abbrv, Sex = hist$sex_code, Ethnic = hist$election_date,Prec=hist$precinct_abbrv),sum)
colnames(agg_hist)[colnames(agg_hist)=="x"] <- "act_total_voters"
summary(agg_hist)
agg_stat <- aggregate(stat$registered_total_voters,list(Age=stat$age,Party=stat$party_cd, Race=stat$race_code, County = stat$county_desc, VTD = stat$vtd_abbrv, Sex = stat$sex_code, Ethnic = stat$election_date,Prec=stat$precinct_abbrv),sum)
# agg_hist <- subset(agg_hist, select = -c(election_date, stats_type, update_date) )
# agg_stat <- subset(agg_stat, select = -c(election_date, stats_type))
colnames(agg_stat)[colnames(agg_stat)=="x"] <- "registered_total_voters"
library(dplyr)
turnouts <- inner_join(agg_hist,agg_stat, by = c("County","Age","Party","Race","Sex","Ethnic","VTD","Prec"))
turnouts$turnout_ratio <- turnouts$act_total_voters / turnouts$registered_total_voters
# Factorize the ones that didn't get automatically factorized
turnouts$Age <- factor(turnouts$Age)
turnouts$Prec <- factor(turnouts$Prec)
turnouts$Sex <- factor(turnouts$Sex)
length(unique(turnouts$County))
random <-sample(1:100, 20, replace=FALSE)
counties <- unique(turnouts$County)
counties_subset <- counties[random]
turnouts_sub <- turnouts[turnouts$County %in% counties_subset, ]
# Remove greater than 1 ratios
turnouts_sub <- turnouts_sub[turnouts_sub$turnout_ratio <= 1,]
# EDA
# Gender (U higher?)
boxplot(turnout_ratio ~ Sex, data = turnouts_sub, col=rainbow(10))
# Race
boxplot(turnout_ratio ~ Race, data = turnouts_sub, col=rainbow(10))
# Ethnic Code
boxplot(turnout_ratio ~ Ethnic, data = turnouts_sub, col=rainbow(10))
# Age
boxplot(turnout_ratio ~ Age, data = turnouts_sub, col=rainbow(10))
# Party Affiliation
boxplot(turnout_ratio ~ Party, data = turnouts_sub, col=rainbow(10))
# Race/Gender interactions
bwplot(turnout_ratio ~ Sex|Race, data = turnouts_sub, group = race_code, xlab="Sex Code")
library(lattice)
set.seed(15)
knitr::opts_chunk$set(echo = TRUE)
hist <- read.table("../Data/history_stats_20161108.txt", sep="\t", dec=",",header = T, na.strings ="", stringsAsFactors= T, comment.char="")
stat <- read.table("../Data/voter_stats_20161108.txt",sep=" " ,header = T, na.strings ="", stringsAsFactors= T)
colnames(hist)[colnames(hist)=="total_voters"] <- "act_total_voters"
hist
colnames(stat)[colnames(stat)=="total_voters"] <- "registered_total_voters"
stat
agg_hist <- aggregate(hist$act_total_voters, list(Age=hist$age, Party=hist$party_cd, Race=hist$race_code, County = hist$county_desc, VTD = hist$vtd_abbrv, Sex = hist$sex_code, Ethnic = hist$election_date,Prec=hist$precinct_abbrv),sum)
colnames(agg_hist)[colnames(agg_hist)=="x"] <- "act_total_voters"
summary(agg_hist)
agg_stat <- aggregate(stat$registered_total_voters,list(Age=stat$age,Party=stat$party_cd, Race=stat$race_code, County = stat$county_desc, VTD = stat$vtd_abbrv, Sex = stat$sex_code, Ethnic = stat$election_date,Prec=stat$precinct_abbrv),sum)
# agg_hist <- subset(agg_hist, select = -c(election_date, stats_type, update_date) )
# agg_stat <- subset(agg_stat, select = -c(election_date, stats_type))
colnames(agg_stat)[colnames(agg_stat)=="x"] <- "registered_total_voters"
library(dplyr)
turnouts <- inner_join(agg_hist,agg_stat, by = c("County","Age","Party","Race","Sex","Ethnic","VTD","Prec"))
turnouts$turnout_ratio <- turnouts$act_total_voters / turnouts$registered_total_voters
# Factorize the ones that didn't get automatically factorized
turnouts$Age <- factor(turnouts$Age)
turnouts$Prec <- factor(turnouts$Prec)
turnouts$Sex <- factor(turnouts$Sex)
length(unique(turnouts$County))
random <-sample(1:100, 20, replace=FALSE)
counties <- unique(turnouts$County)
counties_subset <- counties[random]
turnouts_sub <- turnouts[turnouts$County %in% counties_subset, ]
# Remove greater than 1 ratios
turnouts_sub <- turnouts_sub[turnouts_sub$turnout_ratio <= 1,]
# EDA
# Gender (U higher?)
boxplot(turnout_ratio ~ Sex, data = turnouts_sub, col=rainbow(10))
# Race
boxplot(turnout_ratio ~ Race, data = turnouts_sub, col=rainbow(10))
# Ethnic Code
boxplot(turnout_ratio ~ Ethnic, data = turnouts_sub, col=rainbow(10))
# Age
boxplot(turnout_ratio ~ Age, data = turnouts_sub, col=rainbow(10))
# Party Affiliation
boxplot(turnout_ratio ~ Party, data = turnouts_sub, col=rainbow(10))
# Race/Gender interactions
bwplot(turnout_ratio ~ Sex|Race, data = turnouts_sub, group = Race, xlab="Sex Code")
# Party/Gender interactions
bwplot(turnout_ratio ~ Sex|Party, data = turnouts_sub, group = Party, xlab="Sex Code")
hist(turnouts_sub$turnout_ratio)
hist(turnouts$turnout_ratio)
hist(turnouts_sub$turnout_ratio)
hist(log(turnouts_sub$turnout_ratio))
hist(sqrt(turnouts_sub$turnout_ratio))
hist(turnouts_sub$turnout_ratio)
# Fit model
RandomIntercepts <- lmer(turnout_ratio ~ . + (1|County/Prec), data = bass)
library(lattice)
library(lmer)
?lmer
install.packages("lme4")
library(lattice)
library(lmer)
library(lattice)
library(lme4)
set.seed(15)
knitr::opts_chunk$set(echo = TRUE)
hist <- read.table("../Data/history_stats_20161108.txt", sep="\t", dec=",",header = T, na.strings ="", stringsAsFactors= T, comment.char="")
stat <- read.table("../Data/voter_stats_20161108.txt",sep=" " ,header = T, na.strings ="", stringsAsFactors= T)
colnames(hist)[colnames(hist)=="total_voters"] <- "act_total_voters"
hist
colnames(stat)[colnames(stat)=="total_voters"] <- "registered_total_voters"
stat
agg_hist <- aggregate(hist$act_total_voters, list(Age=hist$age, Party=hist$party_cd, Race=hist$race_code, County = hist$county_desc, VTD = hist$vtd_abbrv, Sex = hist$sex_code, Ethnic = hist$election_date,Prec=hist$precinct_abbrv),sum)
colnames(agg_hist)[colnames(agg_hist)=="x"] <- "act_total_voters"
summary(agg_hist)
agg_stat <- aggregate(stat$registered_total_voters,list(Age=stat$age,Party=stat$party_cd, Race=stat$race_code, County = stat$county_desc, VTD = stat$vtd_abbrv, Sex = stat$sex_code, Ethnic = stat$election_date,Prec=stat$precinct_abbrv),sum)
# agg_hist <- subset(agg_hist, select = -c(election_date, stats_type, update_date) )
# agg_stat <- subset(agg_stat, select = -c(election_date, stats_type))
colnames(agg_stat)[colnames(agg_stat)=="x"] <- "registered_total_voters"
library(dplyr)
turnouts <- inner_join(agg_hist,agg_stat, by = c("County","Age","Party","Race","Sex","Ethnic","VTD","Prec"))
turnouts$turnout_ratio <- turnouts$act_total_voters / turnouts$registered_total_voters
# Factorize the ones that didn't get automatically factorized
turnouts$Age <- factor(turnouts$Age)
turnouts$Prec <- factor(turnouts$Prec)
turnouts$Sex <- factor(turnouts$Sex)
length(unique(turnouts$County))
random <-sample(1:100, 20, replace=FALSE)
counties <- unique(turnouts$County)
counties_subset <- counties[random]
turnouts_sub <- turnouts[turnouts$County %in% counties_subset, ]
# Remove greater than 1 ratios
turnouts_sub <- turnouts_sub[turnouts_sub$turnout_ratio <= 1,]
# Fit model
RandomIntercepts <- lmer(turnout_ratio ~ . + (1|County/Prec), data = bass)
# Fit model
RandomIntercepts <- lmer(turnout_ratio ~ . + (1|County/Prec), data = turnouts_sub)
# Fit model
RandomIntercepts <- lmer(turnout_ratio ~ Age + (1|County/Prec), data = turnouts_sub)
summary(RandomIntercepts)
# Fit model
RandomIntercepts <- lmer(turnout_ratio ~ Age +
Party + Race + County + VTD + Sex + Ethnic +
Prec + (1|County/Prec), data = turnouts_sub)
# Fit model
RandomIntercepts <- lmer(turnout_ratio ~ Age +
Party + Race + County + VTD + Sex + Ethnic + (1|County/Prec), data = turnouts_sub)
View(turnouts)
unique(turnouts$Ethnic)
library(lattice)
library(lme4)
set.seed(15)
knitr::opts_chunk$set(echo = TRUE)
hist <- read.table("../Data/history_stats_20161108.txt", sep="\t", dec=",",header = T, na.strings ="", stringsAsFactors= T, comment.char="")
stat <- read.table("../Data/voter_stats_20161108.txt",sep=" " ,header = T, na.strings ="", stringsAsFactors= T)
colnames(hist)[colnames(hist)=="total_voters"] <- "act_total_voters"
hist
colnames(stat)[colnames(stat)=="total_voters"] <- "registered_total_voters"
stat
agg_hist <- aggregate(hist$act_total_voters, list(Age=hist$age, Party=hist$party_cd, Race=hist$race_code, County = hist$county_desc, VTD = hist$vtd_abbrv, Sex = hist$sex_code, Ethnic = hist$ethnic_code,Prec=hist$precinct_abbrv),sum)
colnames(agg_hist)[colnames(agg_hist)=="x"] <- "act_total_voters"
summary(agg_hist)
agg_stat <- aggregate(stat$registered_total_voters,list(Age=stat$age,Party=stat$party_cd, Race=stat$race_code, County = stat$county_desc, VTD = stat$vtd_abbrv, Sex = stat$sex_code, Ethnic = stat$ethnic_code,Prec=stat$precinct_abbrv),sum)
# agg_hist <- subset(agg_hist, select = -c(election_date, stats_type, update_date) )
# agg_stat <- subset(agg_stat, select = -c(election_date, stats_type))
colnames(agg_stat)[colnames(agg_stat)=="x"] <- "registered_total_voters"
library(dplyr)
turnouts <- inner_join(agg_hist,agg_stat, by = c("County","Age","Party","Race","Sex","Ethnic","VTD","Prec"))
turnouts$turnout_ratio <- turnouts$act_total_voters / turnouts$registered_total_voters
# Factorize the ones that didn't get automatically factorized
turnouts$Age <- factor(turnouts$Age)
turnouts$Prec <- factor(turnouts$Prec)
turnouts$Sex <- factor(turnouts$Sex)
length(unique(turnouts$County))
random <-sample(1:100, 20, replace=FALSE)
counties <- unique(turnouts$County)
counties_subset <- counties[random]
turnouts_sub <- turnouts[turnouts$County %in% counties_subset, ]
# Remove greater than 1 ratios
turnouts_sub <- turnouts_sub[turnouts_sub$turnout_ratio <= 1,]
# Fit model
RandomIntercepts <- lmer(turnout_ratio ~ Age +
Party + Race + County + VTD + Sex + Ethnic + (1|County/Prec), data = turnouts_sub)
# EDA
# Gender (U higher?)
boxplot(turnout_ratio ~ Sex, data = turnouts_sub, col=rainbow(10))
# Race
boxplot(turnout_ratio ~ Race, data = turnouts_sub, col=rainbow(10))
# Ethnic Code
boxplot(turnout_ratio ~ Ethnic, data = turnouts_sub, col=rainbow(10))
# Age
boxplot(turnout_ratio ~ Age, data = turnouts_sub, col=rainbow(10))
# Party Affiliation
boxplot(turnout_ratio ~ Party, data = turnouts_sub, col=rainbow(10))
# Race/Gender interactions
bwplot(turnout_ratio ~ Sex|Race, data = turnouts_sub, group = Race, xlab="Sex Code by Race")
# Party/Gender interactions
bwplot(turnout_ratio ~ Sex|Party, data = turnouts_sub, group = Party, xlab="Sex Code by Party")
hist(turnouts_sub$turnout_ratio)
# Fit model
RandomIntercepts <- lmer(turnout_ratio ~ Age +
Party + Race + County + VTD + Sex + Ethnic + (1|County), data = turnouts_sub)
# Fit model
RandomIntercepts <- lmer(turnout_ratio ~ Age +
Party + Race + VTD + Sex + Ethnic + (1|County/Prec), data = turnouts_sub)
summary(RandomIntercepts)
summary(RandomIntercepts)
summary(RandomIntercepts)
RandomIntercepts2 <- lmer(turnout_ratio ~ Age +
Party + Race + Sex + Ethnic + (1|County/Prec), data = turnouts_sub,family=binomial(link="logit"))
summary(RandomIntercepts2)
summary(RandomIntercepts2)
View(RandomIntercepts2)
summary(RandomIntercepts2)
RandomIntercepts2$coefs
ranef(RandomIntercepts2)
ranef(RandomIntercepts2)$County
0.14440 - ranef(RandomIntercepts2)$County
ranef(RandomIntercepts2)$County - 0.14440
knitr::opts_chunk$set(echo = TRUE)
hist <- read.table("history_stats_20161108.txt",sep="\t" ,header = T, nrows = 390036, na.strings ="", stringsAsFactors= F)
source('~/702_final_project/r/scratch.R', echo=TRUE)
source('~/702_final_project/r/scratch.R', echo=TRUE)
View(games)
source('~/702_final_project/r/scratch.R', echo=TRUE)
source('~/702_final_project/r/scratch.R', echo=TRUE)
?read.csv
source('~/702_final_project/r/scratch.R', echo=TRUE)
View(games)
source('~/702_final_project/r/scratch.R', echo=TRUE)
source('~/702_final_project/r/scratch.R', echo=TRUE)
source('~/702_final_project/r/scratch.R', echo=TRUE)
unique(games$championClass)
source('~/702_final_project/r/scratch.R', echo=TRUE)
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
?xyplot
source('~/702_final_project/r/scratch.R')
boxplot(goldEarned ~ win, data = games)
boxplot(goldEarned ~ championClass, data = games)
boxplot(goldEarned ~ championClass, data = games, col=rainbow(10))
unique(games$championClass)
xyplot(goldEarned ~ fiveMinuteGoldDelta, data=games)
source('~/702_final_project/r/scratch.R')
?xyplot
source('~/702_final_project/r/scratch.R')
xyplot(goldEarned ~ fiveMinuteGoldDelta, data=games)
xyplot(goldEarned ~ fiveMinuteGoldDelta, data=games)
source('~/702_final_project/r/scratch.R')
lme
lmer
?glmer
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
summary(model)
mean(fiveMinuteXPDelta)
mean(games$fiveMinuteGoldDelta)
mean(games$fiveMinuteXPDelta)
source('~/702_final_project/r/scratch.R')
?scale
source('~/702_final_project/r/scratch.R')
View(games)
mean(games_orig$allyBaronKills)
mean(games$allyBaronKills)
games %>%
mutate_if(is.numeric, scale)
?center
source('~/702_final_project/r/scratch.R')
games
view(games)
View(games)
View(games_orig)
summary(model)
plot(model)
roc(games$win,fitted(model),
plot=T,print.thres="best",legacy.axes=T,
print.auc =T,col="red3")
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
roc(games$win,fitted(model),
plot=T,print.thres="best",legacy.axes=T,
print.auc =T,col="red3")
source('~/702_final_project/r/scratch.R')
library(lattice) # for xyplot
library(lme4)
library(dplyr)
library(pROC)
setwd("/Users/ethan/702_final_project/r")
games_orig = read.csv("../data/combined_games.csv", header = T, sep=",", row.names = NULL)
games = games_orig
center <- function(x){
scale(x, center=TRUE, scale=FALSE)
}
# Mean center numeric predictors
games = games %>%
mutate_if(is.numeric, center)
boxplot(goldEarned ~ win, data = games, col=rainbow(10))
boxplot(fiveMinuteGoldDelta ~ win, data = games, col=rainbow(10))
boxplot(fiveMinuteXPDelta ~ win, data = games, col=rainbow(10))
boxplot(goldEarned ~ championClass, data = games, col=rainbow(10))
xyplot(goldEarned ~ fiveMinuteGoldDelta, data=games)
model = glm(win ~ fiveMinuteGoldDelta + fiveMinuteXPDelta + firstDragon, data=games, family=binomial(link="logit"))
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
binnedplot(y=games$win,games$fiveMinuteGoldDelta,xlab="5MGD",ylim=c(0,1),col.pts="navy",
ylab ="Win>",main="Binned 5MGD vs. Win",
col.int="white") # this is to set the SD lines to white and ignore them
?binnedplot
library(ggfortify)
?binnedplot
library(caret)
?binnedplot
library(arm)
library(pROC)
library(e1071)
library(caret)
?binnedplot
source('~/702_final_project/r/scratch.R')
unique(games$championClass)
games_assassin = games[games$championClass == "assassin"]
unique(games_assassin$championClass)
games_assassin
games_assassin = games[games$championClass == "assassin",]
games_assassin
unique(games_assassin$championClass)
# Create separate DF per class, useful for EDA
games_assassin = games[games$championClass == "assassin",]
games_assassin = games[games$championClass == "Assassin",]
unique(games_assassin$championClass)
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
# binnedplots by class w/ 5MGD
par(mfrow=c(2,3))
binnedplot(y=games_assassin$win,games_assassin$fiveMinuteGoldDelta,xlab="5MGD",ylim=c(0,1),col.pts="navy",
ylab ="Win?",main="Assassin",
col.int="white") # this is to set the SD lines to white and ignore them
binnedplot(y=games_fighter$win,games_fighter$fiveMinuteGoldDelta,xlab="5MGD",ylim=c(0,1),col.pts="navy",
ylab ="Win?",main="Fighter",
col.int="white") # this is to set the SD lines to white and ignore them
binnedplot(y=games_mage$win,games_mage$fiveMinuteGoldDelta,xlab="5MGD",ylim=c(0,1),col.pts="navy",
ylab ="Win?",main="Mage",
col.int="white") # this is to set the SD lines to white and ignore them
binnedplot(y=games_marksman$win,games_marksman$fiveMinuteGoldDelta,xlab="5MGD",ylim=c(0,1),col.pts="navy",
ylab ="Win?",main="Marksman",
col.int="white") # this is to set the SD lines to white and ignore them
binnedplot(y=games_support$win,games_support$fiveMinuteGoldDelta,xlab="5MGD",ylim=c(0,1),col.pts="navy",
ylab ="Win?",main="Support",
col.int="white") # this is to set the SD lines to white and ignore them
binnedplot(y=games_tank$win,games_tank$fiveMinuteGoldDelta,xlab="5MGD",ylim=c(0,1),col.pts="navy",
ylab ="Win?",main="Tank",
col.int="white") # this is to set the SD lines to white and ignore them
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
summary(model2)
summary(model2)
source('~/702_final_project/r/scratch.R')
summary(model2)
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
summary(model2)
source('~/702_final_project/r/scratch.R')
summary(model2)
?vif
library(rms)
?vif
vif(model2)
?step
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
summary(Model_backward)
?step
?leaps::step
?step
source('~/702_final_project/r/scratch.R')
summary(Model_backward)
summary(Model_backward)
table(games$championClass)
max(games$fiveMinuteGoldDelta)
length(unique(games$matchId))
games[games$fiveMinuteGoldDelta = min(games$fiveMinuteGoldDelta),]
games[games$fiveMinuteGoldDelta == min(games$fiveMinuteGoldDelta),]
mean(games_org$deaths)
mean(games_orig$deaths)
mean(games_org$kills)
mean(games_orig$kills)
mean(games_orig$assists)
par(mfrow=c(2,3))
binnedplot(y=games_assassin$win,games_assassin$kills,xlab="Kills",ylim=c(0,1),col.pts="navy",
ylab ="Win?",main="Assassin",
col.int="white") # this is to set the SD lines to white and ignore them
binnedplot(y=games_fighter$win,games_fighter$kills,xlab="Kills",ylim=c(0,1),col.pts="navy",
ylab ="Win?",main="Fighter",
col.int="white") # this is to set the SD lines to white and ignore them
binnedplot(y=games_mage$win,games_mage$kills,xlab="Kills",ylim=c(0,1),col.pts="navy",
ylab ="Win?",main="Mage",
col.int="white") # this is to set the SD lines to white and ignore them
binnedplot(y=games_marksman$win,games_marksman$kills,xlab="Kills",ylim=c(0,1),col.pts="navy",
ylab ="Win?",main="Marksman",
col.int="white") # this is to set the SD lines to white and ignore them
binnedplot(y=games_support$win,games_support$kills,xlab="Kills",ylim=c(0,1),col.pts="navy",
ylab ="Win?",main="Support",
col.int="white") # this is to set the SD lines to white and ignore them
binnedplot(y=games_tank$win,games_tank$kills,xlab="Kills",ylim=c(0,1),col.pts="navy",
ylab ="Win?",main="Tank",
col.int="white") # this is to set the SD lines to white and ignore them
games_support[games_support$kills == max(games_support$kills),]
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
summary(model_backward)
summary(model_full)
summary(model_backward)
source('~/702_final_project/r/scratch.R')
summary(model_backward)
source('~/702_final_project/r/scratch.R')
sumamry(model_backward_aic)
summary(model_backward_aic)
vif(model_backward_aic)
source('~/702_final_project/r/scratch.R')
summary(model_backward_aic)
source('~/702_final_project/r/scratch.R')
summary(model_backward_aic)
summary(model_full)
source('~/702_final_project/r/scratch.R')
model_backward_aic
summary(model_backward_aic)
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
summary(model_backward_aic)
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
?binnedplot
binnedplot(predict(model_backward_aic),resid(model_backward_aic),xlab="Expected Value",
col.int="red4",ylab="Avg. residuals",main="Binned residual plot",col.pts="navy")
source('~/702_final_project/r/scratch.R')
?predict
?predict.glm
binnedplot(predict(model_backward_aic, type="response"),residuals(model_backward_aic,"resp"),xlab="Expected Value",
col.int="red4",ylab="Avg. residuals",main="Binned residual plot",col.pts="navy")
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
vif(model_backward_aic)
table(games$win)
summary(model_full)
summary(model_full)
vif(model_backward_aic)
source('~/702_final_project/r/scratch.R')
vif(model_backward_aic)
summary(model_backward_aic)
summary(model_backward_bic)
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
vif(model_backward_aic)
summary(model_full)
summary(model_full_aic)
summary(model_backward_aic)
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
summary(model_backward_aic)
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
summary(model_backward_aic)
source('~/702_final_project/r/scratch.R')
summary(model_backwards_aic)
summary(model_backward_aic)
source('~/702_final_project/r/scratch.R')
summary(model_backward_aic)
summary(model_backward_bic)
source('~/702_final_project/r/scratch.R')
summary(model_backward_bic)
summary(model_backward_aic)
source('~/702_final_project/r/scratch.R')
summary(model_backward_aic)
source('~/702_final_project/r/scratch.R')
summary(model_backward_aic)
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
vif(model_backward_aic)
source('~/702_final_project/r/scratch.R')
source('~/702_final_project/r/scratch.R')
summary(model_backward_aic)
vif(model_backward_aic)
source('~/702_final_project/r/scratch.R')
summary(model_backward_aic)
vif(model_backward_aic)
